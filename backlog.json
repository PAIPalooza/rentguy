[
  {
    "title": "US-1.1: User Signup (Web & Mobile)",
    "body": "**Epic:** User Authentication\n**Description:** As a new user, I want to register with email, password, first name, and last name so that I can create a secure account and receive a JWT for subsequent requests.\n\n**Acceptance Criteria:**\n1. POST `/auth/signup` accepts `{ email, password, first_name, last_name }`.\n2. Password is hashed and stored; user record created in `users` table.\n3. Response returns a valid JWT containing `{ user_id, roles: [] }`.\n4. Error if email already exists (HTTP 400).",
    "labels": ["Epic: User Authentication", "priority: high"]
  },
  {
    "title": "US-1.2: User Login (Web & Mobile)",
    "body": "**Epic:** User Authentication\n**Description:** As a registered user, I want to log in with email and password so that I can receive a JWT to access protected endpoints.\n\n**Acceptance Criteria:**\n1. POST `/auth/login` accepts `{ email, password }`.\n2. If credentials match, return JWT; else return HTTP 401.\n3. JWT payload includes `user_id` and `roles[]`.",
    "labels": ["Epic: User Authentication", "priority: high"]
  },
  {
    "title": "US-1.3: Fetch Current User Profile (`/auth/me`)",
    "body": "**Epic:** User Authentication\n**Description:** As a logged-in user, I want to call `/auth/me` so that I can retrieve my `id`, `email`, `first_name`, `last_name`, and `roles`.\n\n**Acceptance Criteria:**\n1. GET `/auth/me` with valid `Authorization: Bearer <token>`.\n2. Returns `{ id, email, first_name, last_name, roles[], locale }`.\n3. Invalid or expired token → HTTP 401.",
    "labels": ["Epic: User Authentication", "priority: medium"]
  },
  {
    "title": "US-2.1: List Properties",
    "body": "**Epic:** Property Management\n**Description:** As a property manager, I want to fetch all properties I own so that I can see my entire portfolio on one screen.\n\n**Acceptance Criteria:**\n1. GET `/properties?owner_id={userId}` returns an array of properties belonging to `owner_id`.\n2. Each property object includes `{ id, name, address_line1, city, country_iso, default_vat_rate }`.\n3. If no properties exist, return an empty array (HTTP 200).",
    "labels": ["Epic: Property Management", "priority: high"]
  },
  {
    "title": "US-2.2: Create Property",
    "body": "**Epic:** Property Management\n**Description:** As a property manager, I want to create a new property so that I can add it to my portfolio.\n\n**Acceptance Criteria:**\n1. POST `/properties` accepts `{ name, address_line1, city, postal_code, region, country_iso, property_type, default_vat_rate }`.\n2. Creates a record in `properties` with `owner_id` = JWT’s `user_id`.\n3. Returns the created property `{ id, … }` (HTTP 201).\n4. Missing required fields → HTTP 400 with validation errors.",
    "labels": ["Epic: Property Management", "priority: high"]
  },
  {
    "title": "US-2.3: Update Property",
    "body": "**Epic:** Property Management\n**Description:** As a property manager, I want to update details of an existing property so that I can correct or augment its information.\n\n**Acceptance Criteria:**\n1. PUT `/properties/{id}` accepts updated fields (e.g., `{ name, default_vat_rate, region }`).\n2. Only the owner (JWT’s `user_id`) can update; otherwise HTTP 403.\n3. Returns the updated `{ id, name, address_line1, … }` (HTTP 200).",
    "labels": ["Epic: Property Management", "priority: medium"]
  },
  {
    "title": "US-2.4: Delete Property",
    "body": "**Epic:** Property Management\n**Description:** As a property manager, I want to delete a property I own so that it no longer appears in my portfolio.\n\n**Acceptance Criteria:**\n1. DELETE `/properties/{id}` deletes the record if `owner_id` matches JWT’s `user_id`.\n2. All associated units should cascade‐delete (`ON DELETE CASCADE`).\n3. On success, return HTTP 204 (no content).\n4. If I’m not the owner → HTTP 403.",
    "labels": ["Epic: Property Management", "priority: medium"]
  },
  {
    "title": "US-3.1: List Units for a Property",
    "body": "**Epic:** Unit Management\n**Description:** As a property manager, I want to fetch all units under a given property so that I can see unit details (rent, vacancy, etc.).\n\n**Acceptance Criteria:**\n1. GET `/units?property_id={propertyId}` returns an array of unit objects.\n2. Each unit includes `{ id, unit_number, floor, bedrooms, bathrooms, current_rent, currency_iso, is_vacant }`.\n3. If no units exist for that property → return `[]`.\n4. Only the owner of the property can fetch this list; otherwise HTTP 403.",
    "labels": ["Epic: Unit Management", "priority: high"]
  },
  {
    "title": "US-3.2: Create a Unit",
    "body": "**Epic:** Unit Management\n**Description:** As a property manager, I want to add a new unit under a property so that I can track its rent and vacancy status.\n\n**Acceptance Criteria:**\n1. POST `/units` accepts `{ property_id, unit_number, floor, bedrooms, bathrooms, square_meters, current_rent, currency_iso, deposit_amount }`.\n2. Validates that `property_id` belongs to JWT’s `user_id`.\n3. Inserts into `units` with `is_vacant = true`.\n4. Returns the created unit object (HTTP 201).\n5. Missing or invalid fields → HTTP 400.",
    "labels": ["Epic: Unit Management", "priority: high"]
  },
  {
    "title": "US-3.3: Update a Unit",
    "body": "**Epic:** Unit Management\n**Description:** As a property manager, I want to modify unit details (rent, vacancy, etc.) so that the system always reflects accurate unit information.\n\n**Acceptance Criteria:**\n1. PUT `/units/{id}` accepts updates to `{ current_rent, is_vacant, unit_number, … }`.\n2. Only the owner of the parent property can update; otherwise HTTP 403.\n3. Returns the updated unit object (HTTP 200).",
    "labels": ["Epic: Unit Management", "priority: medium"]
  },
  {
    "title": "US-3.4: Delete a Unit",
    "body": "**Epic:** Unit Management\n**Description:** As a property manager, I want to delete a unit when it is no longer part of my portfolio so that I can keep my inventory clean.\n\n**Acceptance Criteria:**\n1. DELETE `/units/{id}` removes the unit if its parent property belongs to JWT’s `user_id`.\n2. Cascades any child data (maintenance requests, leases) if defined.\n3. On success, return HTTP 204.\n4. If I’m not the owner → HTTP 403.",
    "labels": ["Epic: Unit Management", "priority: medium"]
  },
  {
    "title": "US-4.1: Create Tenant",
    "body": "**Epic:** Tenant & Screening\n**Description:** As a property manager, I want to register a new tenant profile so that I can associate them with leases later.\n\n**Acceptance Criteria:**\n1. POST `/tenants` accepts `{ first_name, last_name, email, phone_number, date_of_birth, nationality_iso }`.\n2. Inserts into `tenants` table; returns `{ id, … }` (HTTP 201).\n3. If `email` already exists for a tenant under the same owner, HTTP 400.",
    "labels": ["Epic: Tenant & Screening", "priority: high"]
  },
  {
    "title": "US-4.2: Request Tenant Screening",
    "body": "**Epic:** Tenant & Screening\n**Description:** As a property manager, I want to request a background/credit check for a given tenant so that I can approve/deny them before signing a lease.\n\n**Acceptance Criteria:**\n1. POST `/screening/request` accepts `{ tenant_id, screening_provider }`.\n2. Inserts a `screening_results` row with `status='pending'`.\n3. Simulate external API call: after a brief delay, update `status` → `'approved'`.\n4. Return the created `screening_results` record (HTTP 202 if pending).\n5. If `tenant_id` doesn’t exist or you’re not the owner → HTTP 403/404.",
    "labels": ["Epic: Tenant & Screening", "priority: high"]
  },
  {
    "title": "US-4.3: View Screening Results",
    "body": "**Epic:** Tenant & Screening\n**Description:** As a property manager, I want to fetch the screening status/result for a tenant so that I can decide whether to proceed with a lease.\n\n**Acceptance Criteria:**\n1. GET `/screening/{tenantId}` returns `{ id, tenant_id, screening_provider, status, result_data, requested_at, completed_at }`.\n2. If `tenantId` is invalid or not owned by me → HTTP 403/404.",
    "labels": ["Epic: Tenant & Screening", "priority: medium"]
  },
  {
    "title": "US-5.1: Create Lease",
    "body": "**Epic:** Lease Management\n**Description:** As a property manager, I want to create a lease for a tenant on a specific unit so that the system knows that unit is now occupied.\n\n**Acceptance Criteria:**\n1. POST `/leases` accepts `{ unit_id, tenant_id, lease_start_date, lease_end_date, rent_amount, currency_iso, security_deposit, deposit_currency_iso, vat_rate }`.\n2. Validates that `unit_id` is vacant and belongs to my property, and `tenant_id` exists and is screened (`status='approved'`).\n3. Inserts a record in `leases` with `status='pending_signature'`.\n4. Returns `{ id, unit_id, tenant_id, status, … }` (HTTP 201).\n5. If validation fails → HTTP 400/403.",
    "labels": ["Epic: Lease Management", "priority: high"]
  },
  {
    "title": "US-5.2: Sign Lease Digitally",
    "body": "**Epic:** Lease Management\n**Description:** As a property manager, I want to mark a lease as signed (simulate eIDAS signature) so that the lease becomes active.\n\n**Acceptance Criteria:**\n1. PUT `/leases/{id}/sign` sets `status='active'` and `digital_signed_at=now()`.\n2. Only the property owner can perform this action; otherwise HTTP 403.\n3. Returns the updated lease object (HTTP 200).\n4. If lease is not in `pending_signature` → HTTP 400.",
    "labels": ["Epic: Lease Management", "priority: high"]
  },
  {
    "title": "US-5.3: List Leases by Unit",
    "body": "**Epic:** Lease Management\n**Description:** As a property manager, I want to fetch all leases for a given unit (or just the active one) so that I can verify occupancy and history.\n\n**Acceptance Criteria:**\n1. GET `/leases?unit_id={unitId}` returns an array of lease objects.\n2. Each lease includes `{ id, tenant_id, status, lease_start_date, lease_end_date, rent_amount, vat_rate }`.\n3. If no leases exist → return `[]`.\n4. Only owner of the unit can fetch; otherwise HTTP 403.",
    "labels": ["Epic: Lease Management", "priority: medium"]
  },
  {
    "title": "US-6.1: Generate Invoice for a Lease",
    "body": "**Epic:** Invoice Generation\n**Description:** As a property manager, I want to create an invoice for an active lease so that I can bill rent (with VAT) to the tenant.\n\n**Acceptance Criteria:**\n1. POST `/invoices` accepts `{ lease_id }`.\n2. Validates that the lease exists, is `status='active'`, and belongs to my portfolio.\n3. Calculates:\n   • `amount = rent_amount`\n   • `vat_amount = rent_amount × (vat_rate/100)`\n   • `invoice_number` generated as `INV-{YYYYMMDD}-{sequential}`\n   • `due_date = issue_date + 14 days` (fixed for MVP)\n4. Inserts into `invoices` and `vat_entries`.\n5. Returns `{ id, invoice_number, issue_date, due_date, amount, vat_amount, status='pending' }` (HTTP 201).\n6. If validation fails → HTTP 400/403.",
    "labels": ["Epic: Invoice Generation", "priority: high"]
  },
  {
    "title": "US-6.2: List Invoices for a Lease",
    "body": "**Epic:** Invoice Generation\n**Description:** As a property manager, I want to fetch all invoices associated with a lease so that I can track payment status and history.\n\n**Acceptance Criteria:**\n1. GET `/invoices?lease_id={leaseId}` returns an array of invoice objects.\n2. Each includes `{ id, invoice_number, issue_date, due_date, amount, vat_amount, status }`.\n3. If none exist → return `[]`.\n4. Only owner of the lease can fetch; otherwise HTTP 403.",
    "labels": ["Epic: Invoice Generation", "priority: medium"]
  },
  {
    "title": "US-7.1: Submit Maintenance Request (Mobile)",
    "body": "**Epic:** Maintenance (Mobile)\n**Description:** As a tenant, I want to create a new maintenance request for my unit via the mobile app so that the property manager is notified and can dispatch maintenance staff.\n\n**Acceptance Criteria:**\n1. POST `/maintenance/requests` accepts `{ unit_id, reported_by, category, description }`.\n2. `reported_by` = JWT’s `user_id`.\n3. Creates a `maintenance_requests` record with `status='open'` and `reported_at = now()`.\n4. Returns `{ id, unit_id, reported_by, category, status, reported_at }` (HTTP 201).\n5. If missing fields or unauthorized unit → HTTP 400/403.",
    "labels": ["Epic: Maintenance (Mobile)", "priority: high"]
  },
  {
    "title": "US-7.2: View My Maintenance Requests (Mobile)",
    "body": "**Epic:** Maintenance (Mobile)\n**Description:** As a tenant, I want to see all maintenance requests I’ve submitted so that I know their current status.\n\n**Acceptance Criteria:**\n1. GET `/maintenance/requests?tenant_id={userId}` returns an array of `{ id, unit_id, category, status, reported_at, resolved_at }`.\n2. Only returns requests where `reported_by = userId`.\n3. If none exist → return `[]`.",
    "labels": ["Epic: Maintenance (Mobile)", "priority: medium"]
  },
  {
    "title": "US-7.3: Assign & Resolve Maintenance (Web – Stretch)",
    "body": "**Epic:** Maintenance (Mobile)\n**Description:** As a maintenance worker or property manager, I want to assign myself to a request and mark it as resolved so that the tenant and manager know it’s been completed.\n\n**Acceptance Criteria:**\n1. PUT `/maintenance/requests/{id}/assign` sets `assigned_to = userId` (role=MAINTENANCE).\n2. PUT `/maintenance/requests/{id}/resolve` sets `status='resolved'` and `resolved_at=now()`.\n3. Only authorized roles can assign/resolve; otherwise HTTP 403.",
    "labels": ["Epic: Maintenance (Mobile)", "priority: low"]
  },
  {
    "title": "US-8.1: Dockerize Each Microservice",
    "body": "**Epic:** CI/CD & Testing\n**Description:** As a developer, I want to containerize each microservice with a Dockerfile so that I can build and push images to a registry.\n\n**Acceptance Criteria:**\n1. Each service folder (`user-service/`, `property-service/`, etc.) contains a valid `Dockerfile`.\n2. Running `docker build .` produces a runnable container.\n3. Images tagged as `<service-name>:<git-sha>` in CI.",
    "labels": ["Epic: CI/CD & Testing", "priority: high"]
  },
  {
    "title": "US-8.2: Implement CI/CD Pipeline",
    "body": "**Epic:** CI/CD & Testing\n**Description:** As a developer, I want to configure GitHub Actions so that on merge to `main`: build and test each microservice, push Docker images to ECR/Registry, and deploy updated manifests to the staging environment.\n\n**Acceptance Criteria:**\n1. CI config triggers on `push` or `pull_request` to `main`.\n2. Runs `pytest` for each service; fails build if tests < 80% coverage.\n3. On success, deploys to staging (EKS/ECS) without manual intervention.\n4. Staging health check passes for all `/health` endpoints.",
    "labels": ["Epic: CI/CD & Testing", "priority: high"]
  },
  {
    "title": "US-8.3: Postman Collection & Sanity Tests",
    "body": "**Epic:** CI/CD & Testing\n**Description:** As a QA engineer, I want to have a Postman collection that runs through basic CRUD flows for each service so that we can smoke-test the entire stack on staging.\n\n**Acceptance Criteria:**\n1. Collection includes requests for:\n   - `/auth/signup`, `/auth/login`, `/auth/me`\n   - `/properties`, `/units`, `/tenants`, `/screening`, `/leases`, `/invoices`, `/maintenance/requests`\n2. At least one test per request to verify expected HTTP status and response schema.\n3. A script at the end that asserts all previous requests passed.\n4. Collection can be run in CI against staging.",
    "labels": ["Epic: CI/CD & Testing", "priority: high"]
  },
  {
    "title": "US-8.4: Unit Tests for Core Endpoints",
    "body": "**Epic:** CI/CD & Testing\n**Description:** As a QA/Developer, I want to cover each microservice’s core CRUD endpoints with automated unit tests so that we have ≥ 80% coverage on the MVP features.\n\n**Acceptance Criteria:**\n1. Each service has a `tests/` folder with test files:\n   - `test_auth.py` for signup/login.\n   - `test_property.py` for property CRUD.\n   - `test_unit.py` for unit CRUD.\n   - `test_tenant.py` & `test_screening.py`.\n   - `test_lease.py` & `test_invoice.py`.\n   - `test_maintenance.py`.\n2. Running `pytest --cov` yields ≥ 80% line coverage for MVP flows.",
    "labels": ["Epic: CI/CD & Testing", "priority: high"]
  }
]
