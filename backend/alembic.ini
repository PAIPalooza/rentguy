# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = app/db/migrations

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# timezone to use when rendering the date
# within the migration file as well as the filename.
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
# timezone =

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to app/db/migrations/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path
# version_locations = %(here)s/app/db/migrations/versions

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

sqlalchemy.url = driver://user:pass@localhost/dbname


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks=black
# black.type=console_scripts
# black.entrypoint=black
# black.options=-l 79

# lint with flake8 - use the console_scripts runner, against the "flake8" entrypoint
# hooks=flake8
# flake8.type=console_scripts
# flake8.entrypoint=flake8
# flake8.options=--max-line-length=79

# lint with isort - use the console_scripts runner, against the "isort" entrypoint
# hooks=isort
# isort.type=console_scripts
# isort.entrypoint=isort
# isort.options=--profile black

# format using "black" using the "black" module
# hooks=black
# black.type=module
# black.entrypoint=black.main:patched_main
# black.options=--line-length=79

# lint with flake8 - use the flake8 module
# hooks=flake8
# flake8.type=module
# flake8.entrypoint=flake8.main.cli:main
# flake8.options=--max-line-length=79

# lint with isort - use the isort module
# hooks=isort
# isort.type=module
# isort.entrypoint=isort:main
# isort.options=--profile black

# custom script - use the script runner, with a path to the script
# hooks=custom
# custom.type=script
# custom.entrypoint=./scripts/myalembicscript.py

# custom script - use the script runner, with a module name
# hooks=custom
# custom.type=module
# custom.entrypoint=myalembic.scripts.myalembicscript

# custom script - use the exec runner, with a Python function
# hooks=custom
# custom.type=exec
# custom.entrypoint=myalembic.scripts.myalembicscript:some_function


[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
